-- Adicione este comando para poder rodar este mesmo código
-- varias vezes, sem necessitar dropar as tabelas manualmente.
-- Isto não será necessário se você estiver usando o OneCompiler.
DROP TABLE IF EXISTS DEPARTAMENTO, CURSO, PROFESSOR, ALUNO, DISCIPLINA, TURMA, PRE_REQUISITO, REGISTRO_NOTA;


-- Criando a tabela DEPARTAMENTO
CREATE TABLE DEPARTAMENTO(
  Nome VARCHAR(50) NOT NULL UNIQUE, -- Chave candidata
  Numero_departamento INT PRIMARY KEY
);

-- Criando a tabela CURSO
CREATE TABLE CURSO(
  Nome VARCHAR(50) NOT NULL UNIQUE, -- Chave candidata
  Numero_curso INT PRIMARY KEY,
  Numero_departamento INT NOT NULL, -- Todo curso precisa de um departamento
  FOREIGN KEY (Numero_departamento) REFERENCES DEPARTAMENTO (Numero_departamento)
);

-- Criando a tabela PROFESSOR
CREATE TABLE PROFESSOR(
  Nome VARCHAR(50) NOT NULL, -- O professor precisa ter um nome
  Numero_professor INT PRIMARY KEY, 
  Numero_departamento INT NOT NULL, -- Todo professor precisa ter um departamento
  FOREIGN KEY (Numero_departamento) REFERENCES DEPARTAMENTO (Numero_departamento)
);

-- Criando a tabela ALUNO
CREATE TABLE ALUNO (
  Nome VARCHAR(50) NOT NULL, -- O aluno precisa ter um nome
  Numero_aluno INT PRIMARY KEY,
  Tipo_aluno CHAR(1) NOT NULL,
  Curso INT NOT NULL, -- Todo aluno precisa ter um curso
  FOREIGN KEY (Curso) REFERENCES CURSO (Numero_curso)
);

-- Criando a tabela DISCIPLINA
CREATE TABLE DISCIPLINA (
  Nome_disciplina VARCHAR(50) NOT NULL, -- A disciplina precisa ter um nome
  Numero_disciplina INT PRIMARY KEY,
  Creditos SMALLINT NOT NULL, -- A disciplina precisa necessariamente ter algum credito
  Departamento INT NOT NULL, -- Toda disciplina e vinculada a um departamento
  FOREIGN KEY (Departamento) REFERENCES DEPARTAMENTO (Numero_departamento)
);

-- Criando a tabela PRE_REQUISITO
CREATE TABLE PRE_REQUISITO(
  Numero_disciplina INT,
  Numero_pre_requisito INT,
  PRIMARY KEY (Numero_pre_requisito,Numero_disciplina),
  FOREIGN KEY (Numero_disciplina) REFERENCES DISCIPLINA (Numero_disciplina),
  FOREIGN KEY (Numero_pre_requisito) REFERENCES DISCIPLINA (Numero_disciplina)
);

-- Criando a tabela TURMA
CREATE TABLE TURMA(
  Identificador_turma INT PRIMARY KEY,
  Numero_disciplina INT NOT NULL, -- Toda turma precisa ser vinculada a uma disciplina
  Semestre CHAR(1) NOT NULL, -- A turma precisa acontecer em um semstre 
  Ano INT NOT NULL,-- e em um ano
  Professor INT, -- A turma pode ser cadastrada sem professor
  FOREIGN KEY (Numero_disciplina) REFERENCES DISCIPLINA (Numero_disciplina),
  FOREIGN KEY (Professor) REFERENCES PROFESSOR (Numero_professor)
);

CREATE TABLE REGISTRO_NOTA(
  Numero_aluno INT,
  Identificador_turma INT,
  Nota Numeric(3,1) NOT NULL, -- Nao ha sentido em cadastrar uma nota nula
  PRIMARY KEY(Numero_aluno, Identificador_turma),
  FOREIGN KEY (Numero_aluno) REFERENCES ALUNO (Numero_aluno)
  ON DELETE CASCADE
  ON UPDATE CASCADE, 
  FOREIGN KEY (Identificador_turma) REFERENCES TURMA (Identificador_turma)
  ON DELETE CASCADE
  ON UPDATE CASCADE

);

INSERT INTO DEPARTAMENTO (Nome, Numero_departamento) VALUES
('Engenharia', 1),
('Administração', 2),
('Direito', 3);
INSERT INTO CURSO (Nome, Numero_curso, Numero_departamento) VALUES
('Engenharia de Software', 101, 1),
('Administração de Empresas', 102, 2),
('Direito Empresarial', 103, 3);

INSERT INTO PROFESSOR (Nome, Numero_professor, Numero_departamento) VALUES
('Carlos Silva', 201, 1),
('Marina Rocha', 202, 2),
('João Mendes', 203, 3);

INSERT INTO DISCIPLINA (Nome_disciplina, Numero_disciplina, Creditos, Departamento) VALUES
('Programação I', 301, 4, 1),
('Gestão de Projetos', 302, 3, 2),
('Direito Civil', 303, 4, 3);

INSERT INTO ALUNO (Nome, Numero_aluno, Tipo_aluno, Curso) VALUES
('Ana Paula', 401, 'G', 101),
('Bruno Santos', 402, 'P', 102),
('Carla Souza', 403, 'G', 103),
('Diego Lima', 404, 'P', 101),
('Eduarda Martins', 405, 'G', 102);

INSERT INTO TURMA (Identificador_turma, Numero_disciplina, Semestre, Ano, Professor) VALUES
(501, 301, '1', 2024, 201),
(502, 302, '2', 2024, 202),
(503, 303, '1', 2024, 203);

INSERT INTO REGISTRO_NOTA (Numero_aluno, Identificador_turma, Nota) VALUES
(401, 501, 8.5),
(402, 502, 7.0),
(403, 503, 9.2),
(404, 501, 6.8),
(405, 502, 8.0);

-- Consultando nomes dos alunos e dos seus respectivos departamentos 
-- para chegar no departamento eu preciso passar pelo curso
-- aluno -> curso -> departamento
SELECT ALUNO.Nome as "Nome do aluno", DEPARTAMENTO.Nome as "Nome do departamento" -- organização que darei para o código -- forma de exibicção
FROM ALUNO, CURSO, DEPARTAMENTO
WHERE ALUNO.Curso=CURSO.Numero_curso AND
      CURSO.Numero_departamento=DEPARTAMENTO.Numero_departamento
ORDER BY DEPARTAMENTO.Nome; -- ordenar por departamento

-- SELECT ALUNO.Nome as "Nome do aluno", ALUNO.CURSO =  CURSO.Numero_curso, REGISTRO_NOTA as "Nota", DEPARTAMENTO.Nome as "Nome do departamento"
-- FROM ALUNO, CURSO, REGISTRO_NOTA, DEPARTAMENTO
-- WHERE REGISTRO_NOTA 
-- deus tenha piedade - tentar fazer o desafio 

-- JOIN!!
SELECT ALUNO.Nome AS "NOME", REGISTRO_NOTA.Nota as "Nota" -- tentar fazer com where
FROM REGISTRO_NOTA NATURAL JOIN ALUNO; -- o banco de dados entende que estou comparando os dados que possuem o mesmo nome em uma tabela
 
 select PROFESSOR.Nome, DEPARTAMENTO.Nome 
 FROM PROFESSOR JOIN DEPARTAMENTO USING (Numero_departamento); -- uso o join using quando possuo atributos com o mesmo nome (por isso que geralmente nao uso so id uso id_departamento)
 -- caso aconteça de ter o mesmo nome para os dois atributos usa o using
 
 -- JOIN ON - SEMELHANTE AO WHERE  EU INDICO QUAIS VALORES ESTOU COMPARANDO
 SELECT ALUNO.Nome, CURSO.Nome
 FROM ALUNO JOIN CURSO ON (ALUNO.Curso = CURSO.Numero); -- uso o = para indicar que esses dois valores
 -- de nomes diferentes remetem a mesma coisa (mesmo valor, quero compara-los)
 
 INSERT IGNORE INTO DEPARTAMENTO(Nome,Numero_departamento)
 VALUES ('Departamento de Tecnologia da Informação', 0); -- fazendo o select não vai aparecer 
 -- pois não está ligado a nenhum professor, usa um inner join - ou seja só pesquisas em tabelas "casadas"alter
 
 -- para pesqusiar em tabelas solteiras uso:
 -- RIGHT JOIN // OUTER JOIN
 -- caso não tenha conexão entre tabelas - o dado necessário fica null
 
 -- BETWEEN  PEGO VALORES ENTRE (os valores sao inclusos)alter
 -- union varias consultas em uma só A% - exibe os que começam com A
 -- count conta quantidade de linhas, posso especificar por atributo ou contar do todo
 -- linhas nulas entram no calculo
-- posso apelidar as tabelas para facilitar as consultas
select * FROM Funcionario F inner join 
Telefone T on F.CPF = T.CPF -- USO O APELIDO PARA FAZER A COMPARAÇÃO O QUE ME PERMITI DIGITAR MENOS !!
 -- UNIQUE(A1,A2,A3) -- todos esses valores serão unique
 -- natural join combina duas relações com atributos de mesmo nome 
 -- join using - me deixa especificar qual atributo quero usar para juntar as tabelas
 -- join on -- permite juntar atributos de nomes diferentes com (A1=A2 - digo quais atributos serão iguais)
 
 -- !!! AULA 06!!!--
 -- RESTRIÇÃO CHECK: 
 -- SÓ consigo inserir na tabela se os atributos seguirem essa restrição 
 -- CHECK(Creditos>=2) - só insiro se tiver 2 creditos ou mais  OU USO ALTER TABLE
 -- se eu tentar inserir uma tabela de um credito vai dar um erro de resstrição
 -- se já existirem registros que não seguem essa regra ai vai dar erro ao adicionar
 
 -- INCREMENTAÇÃO AUTOMÁTICA --
 -- Serve muito para ID - começa do 1 e vai incrementando
 -- usa o AUTO_INCREMENT do lado do nome da variavel
 -- ID_secretario INT auto_increment
 -- ao criar nao preciso colocar o id apenas as outras informações do secretário
 
 -- VALOR PADRÃO --
 -- Coloca DEFAULT logo após do create table perto do valor desejado
 -- numero_departamento int not null default 1
 -- não terei mais esse valor vazio a não ser que ao cadastrar a pessoa eu coloque NULL
 -- pedro, null - só assim para ser nulo
 -- se eu colocar um valor padrão em todos os valores anteriores que estiverem sem valor se tornará o valor default
 -- a ação de valor padrão é retroativa
 
 -- UPDATE --
 -- update aluno set Tipo_aluno = 'M' where numero_aluno =550; 
 -- updeito manualmente
 -- where aluno = 'P' -- mudaria de TODOS os alunos que são P
 -- Só funciona se eu tiver set sql_safe_updates = 0; -- desativo osafe mode
 -- revisar parte do where
 -- para alterar a primary key e foreign key preciso mudar para tipo normal (int e afins)
 -- e ai dropa primary key
 -- para saber quais as restrições presentes nas tabelas: 
 -- ANOTAR
 
 -- ON delete cascade - propaga a exclusão se eu apagar  o departamento 10 vai apagar todos os alunos, prof, cursos que possuem o 10
 -- on update cascade - propaga a atualização da mesma forma de exclusão  se eu mudar departamento de 101 para 1001 vai atualizar em todos
 -- que tivessem 101 
 -- ESTUDAR COMO APLICAR E COM O FUNCIONA!!
